# .github/workflows/codeql-advanced.yml
# This file was autogenerated by github/codeql-action.
# It is designed to be largely self-configuring.
#
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL Advanced"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '24 4 * * 6' # Weekly on Saturday at 04:24 UTC

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: actions
          build-mode: none
        - language: javascript-typescript
          build-mode: none
        - language: rust
          # IMPORTANT CHANGE: Revert build-mode to 'none' as per CodeQL's error message.
          # CodeQL will internally manage the build process for Rust when 'none' is set.
          build-mode: none
        # CodeQL supports the following values keywords for 'language': 'actions', 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'rust', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive # Important for repos with submodules

    # --- START OF RUST ENVIRONMENT SETUP FOR CODEQL ---
    # This step ensures that all necessary targets and cross-compilation tools
    # are available BEFORE CodeQL initializes and performs its internal build.
    - if: matrix.language == 'rust'
      name: Prepare Rust environment for CodeQL
      shell: bash
      run: |
        echo "Preparing Rust environment for CodeQL analysis..."

        # Install Rust toolchain if not already present (usually handled by runner, but explicit is safer)
        # and ensure correct version based on Cargo.toml's rust-version
        rustup update --no-self-update stable
        rustup default stable
        rustup show

        # Install mingw-w64 for Windows cross-compilation on Linux runners
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          echo "Setting up for Windows cross-compilation on Linux runner..."
          sudo apt-get update -y
          # Check if mingw-w64 is already installed or install it
          if ! dpkg -s gcc-mingw-w64-x86-64 &> /dev/null; then
            sudo apt-get install -y gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 || echo "Warning: Failed to install mingw-w64 packages. Windows target build might be incomplete."
          else
            echo "mingw-w64 packages already installed."
          fi
          # Add Windows target to rustup
          if ! rustup target list | grep -q 'x86_64-pc-windows-gnu (installed)'; then
            rustup target add x86_64-pc-windows-gnu || echo "Warning: Failed to add x86_64-pc-windows-gnu target. Windows code analysis might be incomplete."
          else
            echo "x86_64-pc-windows-gnu target already installed."
          fi
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "On Windows runner, native Windows target already available."
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "On macOS runner, native macOS target already available. No Windows cross-compilation setup needed."
        fi
        echo "Rust environment preparation complete."
    # --- END OF RUST ENVIRONMENT SETUP FOR CODEQL ---

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }} # This will be 'none' for Rust
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # This 'run' step is left here from the original template for other languages.
    # For Rust, with build-mode: none, CodeQL handles the build internally.
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        # Do NOT exit 1 here, as other languages might actually use this.
        # However, for Rust, this block will NOT execute due to `build-mode: none`.

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

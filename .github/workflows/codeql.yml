# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL Advanced"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '24 4 * * 6'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: actions
          build-mode: none
        - language: javascript-typescript
          build-mode: none
        - language: rust
          # IMPORTANT CHANGE: Set build-mode to 'manual' for Rust
          build-mode: manual
        # CodeQL supports the following values keywords for 'language': 'actions', 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'rust', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Add any setup steps before running the `github/codeql-action/init` action.
    # This includes steps like installing compilers or runtimes (`actions/setup-node`
    # or others). This is typically only required for manual builds.
    # - name: Setup runtime (example)
    #   uses: actions/setup-example@v1

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # --- START OF MANUAL BUILD SECTION FOR RUST ---
    - if: matrix.language == 'rust' && matrix.build-mode == 'manual'
      name: Build Rust project for CodeQL tracing
      shell: bash
      run: |
        echo "Starting manual build for Rust analysis by CodeQL..."
        # Ensure Rust toolchain is correct (already handled by default setup-rust action or runner's rustup)
        rustup show

        # Build for default Linux target
        echo "Building for default Linux target..."
        cargo build --release --all-targets --verbose

        # Install mingw-w64 for Windows cross-compilation (if on ubuntu-latest runner)
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          echo "Setting up for Windows cross-compilation..."
          # Update apt-get and install necessary packages for cross-compilation
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 || { echo "Failed to install mingw-w64 packages. Skipping Windows target build."; }
          # Add Windows target to rustup
          rustup target add x86_64-pc-windows-gnu || { echo "Failed to add x86_64-pc-windows-gnu target. Skipping Windows target build."; }
          # Build for Windows target to ensure CodeQL traces Windows-specific dependencies
          echo "Building for Windows target (x86_64-pc-windows-gnu)..."
          cargo build --release --target x86_64-pc-windows-gnu --all-targets --verbose || { echo "Windows target build failed."; }
        else
          echo "Not on Linux runner, skipping Windows cross-compilation setup."
        fi

        echo "Manual build for Rust completed."
    # --- END OF MANUAL BUILD SECTION FOR RUST ---

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

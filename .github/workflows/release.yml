name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  cleansh_build:
    name: Build & Package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add cargo bin to GITHUB_PATH
        run: echo "${HOME}/.cargo/bin" >> $GITHUB_PATH

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy, rustfmt

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install openssl@1.1 pkg-config
        shell: bash

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
        shell: bash

      - name: Cache Cargo registry & build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install and verify cargo-dist (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          export PATH="${HOME}/.cargo/bin:$PATH"
          cargo install cargo-dist --locked --force
          echo "PATH: $PATH"
          if ! command -v cargo-dist; then
            echo "Error: cargo-dist not found"
            exit 1
          fi
          cargo dist --help | grep -q build || {
            echo "Error: 'cargo dist build' unavailable"
            exit 1
          }

      - name: Install and verify cargo-dist (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $env:Path = "$env:USERPROFILE\\.cargo\\bin;" + $env:Path
          cargo install cargo-dist --locked --force
          if (-not (Get-Command cargo-dist -ErrorAction SilentlyContinue)) {
            Write-Error 'cargo-dist not found'
            exit 1
          }

      - name: Build & package releases (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          export PATH="${HOME}/.cargo/bin:$PATH"
          cargo dist build --tag ${{ github.ref_name }}
        env:
          RUSTFLAGS: '-C target-cpu=native'

      - name: Build & package releases (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $env:Path = "$env:USERPROFILE\\.cargo\\bin;" + $env:Path
          cargo dist build --tag ${{ github.ref_name }}

  cleansh_upload:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: cleansh_build
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add cargo bin to GITHUB_PATH
        run: echo "${HOME}/.cargo/bin" >> $GITHUB_PATH

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install and verify cargo-dist (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          export PATH="${HOME}/.cargo/bin:$PATH"
          cargo install cargo-dist --locked --force
          if ! command -v cargo-dist; then
            echo "Error: cargo-dist not found"
            exit 1
          fi

      - name: Install and verify cargo-dist (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $env:Path = "$env:USERPROFILE\\.cargo\\bin;" + $env:Path
          cargo install cargo-dist --locked --force
          if (-not (Get-Command cargo-dist -ErrorAction SilentlyContinue)) {
            Write-Error 'cargo-dist not found'
            exit 1
          }

      - name: Upload release assets (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          export PATH="${HOME}/.cargo/bin:$PATH"
          cargo dist upload --tag ${{ github.ref_name }}

      - name: Upload release assets (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $env:Path = "$env:USERPROFILE\\.cargo\\bin;" + $env:Path
          cargo dist upload --tag ${{ github.ref_name }}

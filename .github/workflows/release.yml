name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  cleansh_build:
    name: Build & Package on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy, rustfmt

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          brew update
          brew install openssl@1.1 pkg-config

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Cache Cargo registry & build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-cargo-

      - name: Install dist (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: cargo install cargo-dist --locked --force

      - name: Install dist (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: cargo install cargo-dist --locked --force

      - name: Verify dist binary (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "--- Verifying 'dist' binary ---"
          ~/.cargo/bin/dist --version

      - name: Verify dist binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          dist --version

      - name: Build & package release (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        env:
          RUSTFLAGS: '-C target-cpu=native'
        run: |
          # Determine target triple for Linux vs. macOS
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            TARGET="x86_64-apple-darwin"
          else
            TARGET="x86_64-unknown-linux-gnu"
          fi

          ~/.cargo/bin/dist build \
            --tag ${{ github.ref_name }} \
            --ci github \
            --target $TARGET

      - name: Build & package release (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        env:
          RUSTFLAGS: '-C target-cpu=native'
        run: |
          $TARGET = "x86_64-pc-windows-msvc"
          dist build `
            --tag ${{ github.ref_name }} `
            --ci github `
            --target $TARGET
